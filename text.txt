const express = require('express');
const router = express.Router();
const User = require('../models/User');
const getFaceEmbedding = require('../utils/getFaceEmbedding'); 
const axios = require("axios");
const multer = require("multer");
const upload = multer();
const FormData = require("form-data");
router.get('/check-name', async (req, res) => {
      const name = req.query.name;
      console.log("Checking for name:", name);
      try {
        const exists = await User.exists({ name });
        res.json({ exists: !!exists });
        console.log("User exists?", exists); 
      } catch (err) {
        console.error(err);
        res.status(500).json({ error: 'Server error' });
      }
  });
router.post('/register', async (req, res) => {
    const { name, image } = req.body;
    if (!name || !image) return res.status(400).json({ message: "Name and image are required" });
  
    const existing = await User.findOne({ name });
    if (existing) return res.status(409).json({ message: "Name already exists" });
  
    try {
      const embedding = await getFaceEmbedding(image);
      const newUser = new User({ name, embedding });
      await newUser.save();
        const update= await axios.post("http://localhost:8000/update", {
      name: name,
      embedding: embedding,
    });
      console.log("✅ Flask updated:",update.data.message);
      res.json({ message: "User registered successfully" });

    } catch (err) {
      console.error(err);
      res.status(500).json({ message: err.message || "Embedding failed or server error" });
    }
  });
router.post("/recognize", upload.single("image"), async (req, res) => {
    console.log("🔁 Node: Received image from frontend");
    try {
      const formData = new FormData();
      formData.append("image", req.file.buffer, {
        filename: "frame.jpg",
        contentType: req.file.mimetype,
      });
      const response = await axios.post("http://localhost:8000/recognize", formData, {
        headers: formData.getHeaders(),
      });
      console.log("✅ Node: Forwarded to Flask and got response");
      res.json(response.data);
    } catch (err) {
      console.error("❌ Node: Error calling Flask service:", err.message);
      res.status(500).send("Recognition failed");
    }
  });

router.post('/chat', async (req, res) => {
    try {
      const response = await axios.post('http://localhost:5001/ask', {
        query: req.body.query
      });
      res.json(response.data);
    } catch (error) {
      console.error('Flask API error:', error);
      res.status(500).json({ error: 'Failed to communicate with AI service' });
    }
  });
 
module.exports = router;





from flask import Flask, request, jsonify
import numpy as np
import faiss
import base64
import cv2
import face_recognition
from pymongo import MongoClient

app = Flask(__name__)

#mongo_client = MongoClient("mongodb+srv://admin:1234@cluster0.t6hfq.mongodb.net/face_reg?retryWrites=true&w=majority&appName=Cluster0")
mongo_client = MongoClient("mongodb://localhost:27017/")
db = mongo_client["face_reg"]
collection = db["users"]

names = []
embeddings = []
index=0

for user in collection.find():
    names.append(user["name"])
    embeddings.append(user["embedding"])
def norm():
    embedding_matrix = np.array(embeddings).astype("float32")
    faiss.normalize_L2(embedding_matrix)

    index = faiss.IndexFlatIP(embedding_matrix.shape[1])  # Cosine similarity
    index.add(embedding_matrix)
norm()
@app.route("/update", methods=["POST"])
def update():
    print("Inside the update route")
    data = request.get_json()
    name = data["name"]
    embedding = data["embedding"]
    names.append(name)
    embeddings.append(embedding)
    norm()
    return jsonify({"message": "User added successfully"})

@app.route("/recognize", methods=["POST"])
def recognize():
    print("Received image for recognition")
    try:
        if "image" not in request.files:
            return jsonify({"error": "No image uploaded"}), 400

        image_file = request.files["image"]
        img_bytes = image_file.read()

        img_np = np.frombuffer(img_bytes, np.uint8)
        img = cv2.imdecode(img_np, cv2.IMREAD_COLOR)

        face_locations = face_recognition.face_locations(img)
        if not face_locations:
            return jsonify({"results": []})

        face_encodings = face_recognition.face_encodings(img, face_locations)
        results = []

        for i, face_embedding in enumerate(face_encodings):
            face_vector = np.array(face_embedding, dtype="float32").reshape(1, -1)
            faiss.normalize_L2(face_vector)

            D, I = index.search(face_vector, 1)
            similarity = D[0][0]
            matched_name = names[I[0][0]] if similarity > 0.5 else "Unknown"

            top, right, bottom, left = face_locations[i]
            box = [left, top, right - left, bottom - top]

            results.append({
                "name": matched_name,
                "box": box
            })

        return jsonify({"results": results})
    except Exception as e:
        print("Error:", e)
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(port=8000, debug=True)
